//MAIN STRATEGY
function run() -> Command

Deklarasi
    nextBlock : list of Object
    countEMP : integer    // 0 atau 1
    tweetPosition1 : Position
    tweetPosition2 : Position
Body
    //Inisiasi atribut pendukung
    if( RoundSaatIni = 1) then
        countEMP <- 0
        opponentFixPosition <- opponent.position

    //Strategi Memperbaiki Mobil
    if (myCar.damage >= 3) then
        -> FIX
    else if (myCar.damage = 2 or myCar.damage = 1) then
        if (isSafePosition())  then
            -> FIX

    //Strategi Menggunakan Boost
    //Periksa myCar memiliki PowerUps Boost dan sedang tidak menggunakan boost,
    //kemudian lakukan prediksi apakah Boost layak dipakai
    if(havePowerUps(PowerUps.BOOST, myCar.powerups) and myCar.boostCounter = 0 and predictToUseBoost()) then
        -> BOOST

    nextBlock <- getBlocksInFront(myCar.position.lane, myCar.position.block, myCar.speed)

    //Periksa apakah terdapat obstacle pada Block yang dipilih
    if(isThereObstacle(nextBlock)) then 
        //Jika terdapat  obstacle pada nextBlock
        
        //Strategi Menggunakan Lizard dan Strategi Perpindahan Lane
        if (havePowerUps(PowerUps.LIZARD, myCar.powerups) and 
            (predictToUseLizardCauseTerrain(nextBlock) or predictToUseLizardCauseOpponent())) then
            //Periksa apakah myCar memiliki PowerUps Lizard
            //kemudian lakukan prediksi apakah Boost layak dipakai
            -> LIZARD
        else
            //Jika tidak pilih arah yang effektif
            -> getEffectiveDirection_Calculate()
        
    else if(not isThereObstacle(nextBlock)) then
        //Jika tidak terdapat obstacle pada nextBlock

        //Strategi Memprediksi apakah musuh akan menggunakan EMP dan cara yang mungkin untuk menghindarinya
        if (havePowerUps(PowerUps.EMP, opponent.powerups) and 
            myCar.position.block > opponent.position.block and
            myCar.position.block - opponent.position.block <= 2) then
            -> dodgeEMP()
        

        //Strategi Penggunaan EMP dan Strategi untuk overtake  opponent
        if (opponent.position.block > myCar.position.block ) then
            //Jika myCar memiliki PowerUps EMP,
            //lakukan pemeriksaan apakah EMP layak digunakan
            /*  Kondisi layak penggunaan  EMP : 
                Posisi opponent berada pada 2 blok di depan kita dan masih di dalam map pada state yg sama.
                Namun terdapat kasus khusus, jika opponent berada di lane yg sama maka harus dipenuhi kondisi :
                    posisi myCar di state selanjutnya tidak melebihi posisi opponent di state selanjutnya.
            */
            if (havePowerUps(PowerUps.EMP, myCar.powerups) and 
                countEMP <- 0 and  
                opponent.position.block - myCar.position.block > 2 and
                opponent.position.block - myCar.position.block <= 20) then
                if (opponent.position.lane = myCar.position.lane) then
                    if (opponent.position.block > myCar.position.block + myCar.speed) then
                        countEMP <- 1
                        -> EMP
                    
                else
                    countEMP <- 1
                    -> EMP
                
            else
                //Strategi Menggunakan Lizard dan Strategi Perpindahan Lane
                countEMP <- 0
                if (havePowerUps(PowerUps.LIZARD, myCar.powerups) and
                    (predictToUseLizardCauseTerrain(nextBlock) or predictToUseLizardCauseOpponent())) then
                    -> LIZARD
                else
                    -> getEffectiveDirection_Calculate()
                
            
        

        //Strategi Penggunaan Tweet
        /*Terdiri dari strategi pemilihan :
            * 1. posisi didepan opponent saat melakukan Fix
            * 2. posisi saat opponent berada di map sebelumnya atau di map selanjutnya atau
            *    di map saat ini namun berada di belakang */
        tweetPosition1 <- predictToUseTweet1(opponentFixPosition)
        tweetPosition2 <- predictToUseTweet2()
        if(tweetPosition1.block != 0 and tweetPosition1.lane != 0) then
            -> TweetCommand(tweetPosition1.lane, tweetPosition1.block +opponent.speed + 4)
        else
            opponentFixPosition <- opponent.position
        
        if(tweetPosition2.block != 0 and tweetPosition2.lane != 0) then
            -> TweetCommand(tweetPosition2.lane, tweetPosition2.block)
        
        //Strategi Penggunaan OIL
        if (havePowerUps(PowerUps.OIL, myCar.powerups) and predictToUseOil()) then
            -> OIL
        
    
    
    -> ACCELERATE

// ADDED STRATEGY

/*  Hitung terlebih dahulu jumlah damage yang diberikan jika melewati lane tersebut tanpa menggunakan lizard
 *  periksa apakah damage myCar + damage >= 3 atau
 *  block myCar + speed myCar > block myCar + blok lastObstacle
 *  dengan lastObstacle adalah obstalce terakhir di lane pada saat pemeriksaan lane */
function predictToUseLizardCauseTerrain(List<Object> nextBlock) -> boolean
DEKLARASI 
    damage : integer
BODY
    damage <- calculatePossibleDamageFromChoosenWay(nextBlock)
    if (myCar.damage + damage >= 3 or 
       (myCar.position.block + myCar.speed > 
        myCar.position.block + idxLastObstacle (nextBlock, lastObstacleInFront(nextBlock)))) then
        -> true
    
    -> false 


/* Periksa apakah mungkin melangkahi opponent dengan menggunakan lizard
 * berada di posisi lane yang sama, dan
 * posisi block myCar + speed myCar > block opponet + speed opponent
 */
function predictToUseLizardCauseOpponent() -> boolean
DEKLARASI
    ...
BODY
    if (opponent.position.lane = myCar.position.lane and 
        opponent.position.block > myCar.position.block and 
        myCar.position.block + myCar.speed > opponent.position.block + opponent.speed) then
        -> true
    
    -> false



/* opponent berada pada jarak 1 s.d 5 di belakang 
    periksa lane yang mungkin akan dilewati opponent, bila pada lane-lane tersebut belum ada obstacle, 
    kembalikan true
    */
function predictToUseOil() -> boolean
DEKLARASI
    RightBlocks, LeftBlocks : list of Object
BODY
    if (opponent.position.lane = myCar.position.lane and opponent.position.block < myCar.position.block ) then
        if (myCar.position.block - opponent.position.block <= 5) then
            -> true
        else
            if (myCar.position.lane = 1) then
                RightBlocks <- getBlocksInFront(myCar.position.lane+1, myCar.position.block, myCar.speed)
                if (isThereObstacle(RightBlocks)) then
                    -> true
                
            else if (myCar.position.lane = 4) then
                LeftBlocks <- getBlocksInFront(myCar.position.lane - 1, myCar.position.block, myCar.speed)
                if (isThereObstacle(LeftBlocks)) then
                    -> true
                
            else
                RightBlocks <- getBlocksInFront(myCar.position.lane + 1, myCar.position.block, myCar.speed)
                LeftBlocks <- getBlocksInFront(myCar.position.lane - 1, myCar.position.block, myCar.speed)
                if (isThereObstacle(RightBlocks) or isThereObstacle(LeftBlocks)) then
                    -> true
                
            
        
    
    -> false


/* Memeriksa apakah di suatu posisi, opponent sedang melakukan fix
 * Akan mengembalikan posisi opponent bila sedang melakukan fix */
function predictToUseTweet1(Position fixPosition) -> position
DEKLARASI
    target : Position
BODY
    target.block <- 0
    target.lane <- 0
    if (opponent.position.lane = fixPosition.lane and 
        opponent.position.block = fixPosition.block) then
        if(havePowerUps(PowerUps.TWEET, myCar.powerups)) then
            target.block <- opponent.position.block
            target.lane <- opponent.position.lane
        else
            target.block <- 0
            target.lane <- 0
        
    
    -> target


// Fungsi dengan -> Position
/* Posisi yang akan dikembalikan :
    * Kasus 1 : opponent berada pada jarak 2 s.d 5 di belakang 
        periksa lane yang mungkin akan dilewati opponent, bila pada lane-lane tersebut belum ada obstacle, 
        posisi target menjadi di lane tersebut dan blocknya +1 dari posisi block opponent
    * Kasus 2 : opponent berada pada jarak > 5 di belakang atau berada pada jarak >20 di depan
        posisi target menjadi tepat di depan opponent
    */

function predictToUseTweet2() -> Position
DEKLARASI
    target : Position
    i : integer
BODY
    target.block <- 0
    target.lane <- 0
    if (havePowerUps(PowerUps.TWEET, myCar.powerups)) then
        // Prediksi Target peletakan bila pada state tersebut opponent berada pada jangkauan myCar
        if (myCar.position.block - opponent.position.block <= 5 and myCar.position.block - opponent.position.block > 1) then
            i <- 1
            while(i <= 4 and i != myCar.position.lane) do
                blocks <- getBlocksInFront(i, opponent.position.block, opponent.speed)
                if (not isThereObstacle(blocks)) then
                    target.block <- opponent.position.block + 1
                    target.lane <- opponent.position.lane
                else
                    if (i = 1) then
                        RightBlocks <- getBlocksInFront(i+1, opponent.position.block, opponent.speed-1)
                        if (not isThereObstacle(RightBlocks)) then
                            target.lane <- i+1
                            target.block <- opponent.position.block + 1
                        
                    else if(i = 4) then
                        LeftBlocks <- getBlocksInFront(i-1, opponent.position.block, opponent.speed-1)
                        if (not isThereObstacle(LeftBlocks)) then
                            target.lane <- i-1
                            target.block <- opponent.position.block + 1
                        
                    else
                        LeftBlocks <- getBlocksInFront(i-1, opponent.position.block, opponent.speed-1)
                        RightBlocks <- getBlocksInFront(i+1, opponent.position.block, opponent.speed-1)
                        if (not isThereObstacle(LeftBlocks) and not isThereObstacle(RightBlocks)) then
                            target.lane <- i - 1
                            target.block <- opponent.position.block + 1
                        else if (not isThereObstacle(LeftBlocks) and isThereObstacle(RightBlocks)) then
                            target.lane <- i - 1
                            target.block <- opponent.position.block + 1
                        else if (isThereObstacle(LeftBlocks) and not isThereObstacle(RightBlocks)) then
                            target.lane <- i + 1
                            target.block <- opponent.position.block + 1
                i <- 1

        else if (myCar.position.block - opponent.position.block > 5 or myCar.position.block - opponent.position.block < 0)  then
            target.lane <- opponent.position.lane
            target.block <- opponent.position.block + 1
        
    
    -> target

/* Fungsi digunakan untuk mengecek apakah 15 blok di depan myCar 
 * tidak memiliki jenis terrain yang merupakan obstacle */
function boolean predictToUseBoost() then
DEKLARASI
    blocks : list of Object
BODY
    blocks <- getBlocksInFront(myCar.position.lane, myCar.position.block, 15)
    if (not isThereObstacle(blocks)) then
        -> true
    
    -> false

function getEffectiveDirection_Calculate() -> Command
DEKLARASI
    direction : string
    damage_L, damage_C, damage_R : integer
    collectedPowerUps_L : integer
    collectedPowerUps_C : integer
    collectedPowerUps_R : integer
    CurrentBlocks, LeftBlocks, RightBlocks : list of Object 
BODY
        direction <- "Stay"
        CurrentBlocks <- getBlocksInFront(myCar.position.lane , myCar.position.block, myCar.speed)

        damage_L <- 0, damage_R <- 0
        damage_C <- calculatePossibleDamageFromChoosenWay(CurrentBlocks)
        collectedPowerUps_C <- countPowerUpsFromChoosenWay(CurrentBlocks)
    
        if (myCar.position.lane = 1) then
            RightBlocks <- getBlocksInFront(myCar.position.lane + 1, myCar.position.block-1, myCar.speed)
            damage_R    <- calculatePossibleDamageFromChoosenWay(RightBlocks)
            if (damage_C < damage_R) then
                direction <- "Stay"
            else if (damage_C > damage_R) then
                direction <- "Right"
            else
                collectedPowerUps_R <- countPowerUpsFromChoosenWay(RightBlocks)
                if (collectedPowerUps_C >= collectedPowerUps_R) then
                    direction <- "Stay"
                else
                    direction <- "Right"
                
            
        else if(myCar.position.lane = 4) then
            List<Object> LeftBlocks = getBlocksInFront(myCar.position.lane - 1, myCar.position.block-1, myCar.speed)
            damage_L <- calculatePossibleDamageFromChoosenWay(LeftBlocks)
            if (damage_C < damage_L){
                direction <- "Stay"
            else if (damage_C > damage_L){
                direction <- "Left"
            else{
                collectedPowerUps_L = countPowerUpsFromChoosenWay(LeftBlocks)
                if (collectedPowerUps_C >= collectedPowerUps_L){
                    direction <- "Stay"
                else{
                    direction <- "Left"
                
            
        else
            LeftBlocks <- getBlocksInFront(myCar.position.lane - 1, myCar.position.block - 1, myCar.speed)
            RightBlocks <- getBlocksInFront(myCar.position.lane + 1, myCar.position.block - 1, myCar.speed)
            damage_L <- calculatePossibleDamageFromChoosenWay(LeftBlocks)
            damage_R <- calculatePossibleDamageFromChoosenWay(RightBlocks)
            if (damage_C < damage_R) then
                if (damage_C > damage_L) then
                    direction <- "Left"
                 else if (damage_C < damage_L) then
                    direction <- "Stay"
                 else
                    collectedPowerUps_L = countPowerUpsFromChoosenWay(LeftBlocks)
                    if (collectedPowerUps_C >= collectedPowerUps_L) then
                        direction <- "Stay"
                     else 
                        direction <- "Left"
                    
                
             else if (damage_C > damage_R) then
                if (damage_L < damage_R) then
                    direction <- "Left"
                 else if (damage_L > damage_R) then
                    direction <- "Right"
                 else 
                    collectedPowerUps_L = countPowerUpsFromChoosenWay(LeftBlocks)
                    collectedPowerUps_R = countPowerUpsFromChoosenWay(RightBlocks)
                    if (collectedPowerUps_L > collectedPowerUps_R) then
                        direction <- "Left"
                     else if (collectedPowerUps_L < collectedPowerUps_R) then
                        direction <- "Right"
                     else 
                        //Random, tapi untuk sementara pilih left
                        direction <- "Left"
                    
                
             else 
                if (damage_C > damage_L) then
                    direction <- "Left"
                 else if (damage_C <= damage_L) then
                    direction <- "Stay"
                
            
        

        if (direction = "Stay") then
            -> ACCELERATE
        else if(direction = "Left")then
            -> LEFT
        else if(direction = "Right")then
            -> RIGHT
        
        -> ACCELERATE
    

// FUNGSI TAMBAHAN

function dodgeEMP() -> Command
    // Periksa di lane mana opponent berada
    // Pindah ke lane yang aman :
    // 1. lane 1 atau lane 2, maka pindah ke kanan
    // 2. lane 3 atau lane 4, maka pindah ke kiri

function countPowerUpsFromChoosenWay(blocks : list of Object) -> integer
    // Mengembalikan banyak PowerUps yang akan diterima bila melewati kumpulan blocks yang dipilih

function calculatePossibleDamageFromChoosenWay(blocks : list of Object) -> integer
    // Mengembalikan damage yang akan diterima bila melewati kumpulan blocks yang dipilih

funtion havePowerUps(name : PowerUps, inCar : array of PowerUps) -> boolean
    // Memeriksa apakah pada suatu List PowerUps memiliki PowerUps yang diinginkan

function lastObstacleInFront(lane : list of Object) -> Object

function idxLastObstacle(lane : list of Object, nameTerrain : Object) -> integer

function isThereObstacle(blocks : list of Object) -> boolean
    // Digunakan untuk memeriksa apakah pada blocks 
       memiliki salah satu jenis terrain berikut : WALL, MUD, OIL_SPILL*/

function isSafePosition() -> boolean
    // Digunakan untuk memeriksa apakah posisi myCar sekarang dalam posisi aman.
       /* Posisi aman berada pada :
        * Blok yang akan dilewati selanjutnya tidak memiliki bad terrain (oil spill, wall, mud) dan
        * (jarak opponent dan myCar > 20 dengan myCar berada lebih di depan atau
        *  jarak opponent dan myCar antara 1 dan 20 serta opponent tidak memiliki EMP  atau
        *  jarak opponent dan myCar > 15 dengan opponent berada lebih di depan) */

function getBlocksInFront(lane : integer, block : integer, size : integer) -> list of Object
    // Mengambil block yang berada di depan posisi (lane,block) sebesar size